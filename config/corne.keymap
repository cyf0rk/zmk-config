/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * My take on 'real programmers Dvorak' layout with custom symbol layers.
 * References:
 *     Programmers dv: Programmer Dvorak layout (by Roland Kaufmann)
 *     Real programmers dv: https://github.com/ThePrimeagen
 *     My qmk config: https://github.com/timonviola/qmk_firmware/tree/master/keyboards/crkbd/keymaps/timon
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define SYM 1
#define NAV 2
#define MEDIA 3
#define FUN 4
#define MACRO 5

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41

// This is ok if only a single sticky key is used.
// Create new behavior if multiple &sk is used.
&sk {
    quick-release;
};

/ {
    behaviors {
        td_caps: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kp CAPSLOCK>;
        };
        /**
         * Left hand positional hold tap, used for home block modifiers
         */
        lhr: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R>;
            hold-trigger-on-release;
        };

        /**
         * Right hand positional hold tap, used for home block modifiers
         */
        rhr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L>;
            hold-trigger-on-release;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        /**
         * Base layer
         */
        default_layer {
            label = "base";
            bindings = <
   &none &kp SEMI    &kp COMMA   &kp DOT      &kp P        &kp Y                &kp F &kp G        &kp C        &kp R       &kp L       &none
   &none &lhr LGUI A &lhr LALT O &lhr LSHFT E &lhr LCTRL U &kp I                &kp D &rhr LCTRL H &rhr LSHFT T &rhr LALT N &rhr LGUI S &none
   &none &kp SQT     &kp Q       &kp J        &kp K        &kp X                &kp B &kp M        &kp W        &kp V       &kp Z       &none
                            &mt LCTRL ESC &lt NAV ENTER &lt MACRO SPACE      &kp BSPC &mo SYM &td_caps
            >;
        };

        /**
         * Symbol layer
         */
        sym_layer {
            label = "sym";
            bindings = <
   &none &kp N1         &kp N2         &kp N3          &kp N4          &kp N5         &kp N6    &kp N7          &kp N8          &kp N9         &kp N0         &none
   &none &lhr LGUI PLUS &lhr LALT LBKT &lhr LSHFT LBRC &lhr LCTRL LPAR &kp AMPS       &kp EQUAL &rhr LCTRL RPAR &rhr LSHFT RBRC &rhr LALT RBKT &rhr LGUI EXCL &none
   &none &kp GRAVE      &kp HASH       &kp DLLR        &kp CARET       &kp AT         &kp MINUS &kp STAR        &kp PRCNT       &kp FSLH       &kp BSLH       &none
                                                          &trans &trans &trans   &trans &trans &trans
            >;
        };

        /**
         * Navigation layer
         */
        nav_layer {
            label = "nav";
            bindings = <
   &none &mt LALT TAB  &kp W &kp E &kp R &kp T         &kp PG_UP &kp BSPC &kp UP   &kp DEL   &trans  &none
   &none &mt LCTRL ESC &kp S &kp D &kp F &kp G         &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET &none
   &none &td_caps      &kp X &kp C &kp V &kp DEL       &kp INS   &trans   &trans   &trans    &to FUN &none
                            &kp LGUI &trans &trans   &trans &trans &trans
            >;
        };

        /**
         * Media layer
         */
        media_layer {
            label = "media";
            bindings = <
   &none &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp C_BRI_UP &trans     &trans       &trans       &trans &none
   &none &trans           &trans            &trans       &trans       &trans       &kp C_BRI_DN &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &trans &none
   &none &ext_power EP_ON &ext_power EP_OFF &trans       &trans       &trans       &trans       &kp C_PREV &kp C_PP     &kp C_NEXT   &none  &none
                                                         &trans &trans &to BASE    &to FUN      &trans &trans
            >;
        };

        /**
         * Function layer
         */
        fun_layer {
            label = "fun";
            bindings = <
   &none &kp F1 &kp F2  &kp F3  &kp F4  &kp PSCRN             &trans &trans    &trans    &trans   &trans    &none
   &none &kp F5 &kp F6  &kp F7  &kp F8  &kp SLCK              &trans &kp LCTRL &kp LSHFT &kp LALT &kp LGUI  &none
   &none &kp F9 &kp F10 &kp F11 &kp F12 &kp PAUSE_BREAK       &trans &trans    &trans    &trans   &to MEDIA &none
                                  &trans &trans &to BASE    &trans &trans &trans
            >;
        };

        /**
         * Macro layer
         */
        macro_layer {
            label = "macro";
            bindings = <
   &none &kp LC(N1)       &kp LC(N2) &kp LC(N3) &kp LC(N4) &kp LC(N5)        &kp LC(N6) &kp LC(N7) &kp LC(N8) &kp LC(N9) &kp LC(N0) &none
   &none &kp LG(N1)       &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)        &kp LG(N6) &kp LG(N7) &kp LG(N8) &kp LG(N9) &kp LG(N0) &none
   &none &mt LSHFT LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(X)         &none      &none      &none      &none      &none      &none
                                            &kp LALT &kp LSHFT &trans    &trans &trans &trans
            >;
        };
    };
};
