/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * My take on 'real programmers Dvorak' layout with custom symbol layers.
 * References:
 *     Programmers dv: Programmer Dvorak layout (by Roland Kaufmann)
 *     Real programmers dv: https://github.com/ThePrimeagen
 *     My qmk config: https://github.com/timonviola/qmk_firmware/tree/master/keyboards/crkbd/keymaps/timon
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define SYM 1
#define NAV 2
#define MEDIA 3
#define FUN 4
#define MACRO 5

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41

// This is ok if only a single sticky key is used.
// Create new behavior if multiple &sk is used.
&sk {
    quick-release;
};

/ {
    behaviors {
        td_caps: tap_dance_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };
        /**
         * Positional hold tap, tap preferred
         */
        ptp: positional_hold_tap_pref {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_PREF";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
        };
        /**
         * Positional hold tap, hold preferred
         */
        php: positional_hold_pref_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_PREF_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
        };
        /**
         * Layer positional hold tap, hold preferred
         */
        lphp: layer_positional_hold_pref_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_POSITIONAL_HOLD_PREF_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <30>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
            hold-trigger-on-release;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        /**
         * Base layer
         */
        default_layer {
            label = "base";
            bindings = <
   &none &kp SEMI &ptp LALT COMMA &ptp LCTRL DOT &ptp LGUI P &kp Y                &kp F &ptp RGUI G &ptp RCTRL C &ptp RALT R &kp L &none
   &none &kp A    &kp O           &kp E          &kp U       &kp I                &kp D &kp H       &kp T        &kp N       &kp S &none
   &none &kp SQT  &kp Q           &kp J          &kp K       &kp X                &kp B &kp M       &kp W        &kp V       &kp Z &none
                                    &lphp MACRO RET &lphp NAV SPACE &td_caps      &mo NAV &mo SYM &kp RGUI
            >;
        };

        /**
         * Symbol layer
         */
        sym_layer {
            label = "sym";
            bindings = <
   &none &kp N1    &kp N2   &kp N3   &kp N4    &kp N5         &kp N6    &kp N7   &kp N8    &kp N9   &kp N0    &none
   &none &kp PLUS  &kp LBKT &kp LBRC &kp LPAR  &kp AMPS       &kp EQUAL &kp RPAR &kp RBRC  &kp RBKT &kp MINUS &none
   &none &kp GRAVE &kp HASH &kp DLLR &kp CARET &kp AT         &kp EXCL  &kp STAR &kp PRCNT &kp FSLH &kp BSLH  &none
                                    &trans &trans &trans   &trans &trans &trans
            >;
        };

        /**
         * Navigation layer
         */
        nav_layer {
            label = "nav";
            bindings = <
   &none &php LALT TAB  &kp W     &kp E     &kp R     &kp T         &kp PG_UP &kp BSPC &kp UP   &kp DEL   &trans  &none
   &none &php LCTRL ESC &kp LC(A) &kp D     &kp F     &to FUN       &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET &none
   &none &kp LSHFT      &kp LC(X) &kp LC(C) &kp LC(V) &kp BSPC       &kp INS  &trans   &trans   &trans    &trans  &none
                                      &trans &trans &trans   &trans &trans &trans
            >;
        };

        /**
         * Media layer
         */
        media_layer {
            label = "media";
            bindings = <
   &none &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &kp C_BRI_UP &trans     &trans       &trans       &trans &none
   &none &trans           &trans            &trans       &trans       &trans          &kp C_BRI_DN &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &trans &none
   &none &ext_power EP_ON &ext_power EP_OFF &out OUT_USB &out OUT_BLE &bt BT_CLR      &trans       &kp C_PREV &kp C_PP     &kp C_NEXT   &none  &none
                                                         &trans &to BASE &trans    &trans &to FUN &trans
            >;
        };

        /**
         * Function layer
         */
        fun_layer {
            label = "fun";
            bindings = <
   &none &kp F1 &kp F2  &kp F3  &kp F4  &kp PSCRN             &trans &trans    &trans    &trans   &trans    &none
   &none &kp F5 &kp F6  &kp F7  &kp F8  &kp SLCK              &trans &kp RSHFT &kp RCTRL &kp RALT &kp RGUI  &none
   &none &kp F9 &kp F10 &kp F11 &kp F12 &kp PAUSE_BREAK       &trans &trans    &trans    &trans   &trans    &none
                                  &trans &to BASE &trans    &trans &to MEDIA &trans
            >;
        };

        /**
         * Macro layer
         */
        macro_layer {
            label = "macro";
            bindings = <
   &none &kp LC(N1) &kp LC(N2) &kp LC(N3) &kp LC(N4) &kp LC(N5)        &kp LC(N6) &kp LC(N7) &kp LC(N8) &kp LC(N9) &kp LC(N0) &none
   &none &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)        &kp LG(N6) &kp LG(N7) &kp LG(N8) &kp LG(N9) &kp LG(N0) &none
   &none &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(S)         &none      &none      &none      &none      &none      &none
                                            &trans &trans &trans    &trans &trans &trans
            >;
        };
    };
};
